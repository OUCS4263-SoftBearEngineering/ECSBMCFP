// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Instruction decoding
    And(a=instruction[15], b=true, out=isC);
    Not(in=isC, out=isA);
      


    // Write to A
    // 5 = start of ddd (destination bits)
    And(a=isC, b=instruction[5], out=isCAndWriteA);
    // if write to A either because C->write A (destination starts w 1) or A
    Or(a=isA, b=isCAndWriteA, out=isWriteA);
    // select what to write to A based on instruction
    Mux16(a=instruction, b=outALU, sel=isCAndWriteA, out=writeToA);
    // finally write to A
    ARegister(in=writeToA, load=isWriteA, out=storedA, out[0..14]=addressM);   


    // Write to D
    // 4 = second d in ddd (destination bits)
    And(a=isC, b=instruction[4], out=isWriteD);                             
    DRegister(in=outALU, load=isWriteD, out=storedD);



      
    // Do computation
    Mux16(a=storedA, b=inM, sel=instruction[12], out=isAorM);                 
    ALU(x=storedD, y=isAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=isZero, ng=isNeg);



    // Write to M
    // 3 = third d in ddd (destination bits)
    And(a=isC, b=instruction[3], out=writeM); 
       



    // jumps
    And(a=isZero, b=instruction[1], out=JEQ);
    And(a=isNeg, b=instruction[2], out=JLT);

    Not(in=isNeg, out=isPosOrZero);
    Not(in=isZero, out=isPosOrNeg);
    And(a=isPosOrZero, b=isPosOrNeg, out=isPos); 
    And(a=isPos, b=instruction[0], out=JGT);
          
    Or(a=JEQ, b=JLT, out=JEQorJLT);
    Or(a=JEQorJLT, b=JGT, out=couldBeJump);  
               
    And(a=isC, b=couldBeJump, out=jump);  
    Not(in=jump, out=noJump);
    PC(in=storedA, inc=noJump, load=jump, reset=reset, out[0..14]=pc);
}